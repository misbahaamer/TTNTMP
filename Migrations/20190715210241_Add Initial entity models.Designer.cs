// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TTNtmp.Persistence;

namespace TTNtmp.Migrations
{
    [DbContext(typeof(TTNtmpDbContext))]
    [Migration("20190715210241_Add Initial entity models")]
    partial class AddInitialentitymodels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TTNtmp.Models.CheckoutHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CheckedOutDate");

                    b.Property<int>("EmployeeCardId");

                    b.Property<int>("VendorPositionId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeCardId");

                    b.HasIndex("VendorPositionId");

                    b.ToTable("CheckoutHistories");
                });

            modelBuilder.Entity("TTNtmp.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DOB");

                    b.Property<int?>("EmployeeCardId");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("HomeVendorsId");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("MarketingEmail")
                        .IsRequired();

                    b.Property<int>("MarketingPhone");

                    b.Property<string>("PersonalEmail")
                        .IsRequired();

                    b.Property<int>("PersonalPhone");

                    b.Property<string>("Status")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeCardId");

                    b.HasIndex("HomeVendorsId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("TTNtmp.Models.EmployeeCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.HasKey("Id");

                    b.ToTable("EmployeeCards");
                });

            modelBuilder.Entity("TTNtmp.Models.Holds", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmployeeCardId");

                    b.Property<DateTime>("HoldPlaced");

                    b.Property<int?>("VendorPositionId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeCardId");

                    b.HasIndex("VendorPositionId");

                    b.ToTable("Holds");
                });

            modelBuilder.Entity("TTNtmp.Models.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmployeeCardId");

                    b.Property<DateTime>("OnDate");

                    b.Property<int>("VendorPositionId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeCardId");

                    b.HasIndex("VendorPositionId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("TTNtmp.Models.VendorHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId");

                    b.Property<DateTime>("Date");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("VendorHours");
                });

            modelBuilder.Entity("TTNtmp.Models.VendorPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("BillRate");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int?>("LocationId");

                    b.Property<int>("NoOfRequirements");

                    b.Property<string>("PositionUrl");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("VendorPositions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("VendorPosition");
                });

            modelBuilder.Entity("TTNtmp.Models.VendorPositionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("StatusType")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("VendorPositionStatuses");
                });

            modelBuilder.Entity("TTNtmp.Models.Vendors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("OpenDate");

                    b.Property<string>("PositionUrl");

                    b.Property<string>("VendorName")
                        .IsRequired();

                    b.Property<string>("VendorPhone")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("TTNtmp.Models.CandidateFeedBack", b =>
                {
                    b.HasBaseType("TTNtmp.Models.VendorPosition");

                    b.Property<string>("FeedBack");

                    b.HasDiscriminator().HasValue("CandidateFeedBack");
                });

            modelBuilder.Entity("TTNtmp.Models.VendorClient", b =>
                {
                    b.HasBaseType("TTNtmp.Models.VendorPosition");

                    b.Property<string>("ClientID");

                    b.Property<string>("ClientLocation");

                    b.Property<string>("ClientName");

                    b.HasDiscriminator().HasValue("VendorClient");
                });

            modelBuilder.Entity("TTNtmp.Models.CheckoutHistory", b =>
                {
                    b.HasOne("TTNtmp.Models.EmployeeCard", "EmployeeCard")
                        .WithMany()
                        .HasForeignKey("EmployeeCardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TTNtmp.Models.VendorPosition", "VendorPosition")
                        .WithMany()
                        .HasForeignKey("VendorPositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TTNtmp.Models.Employee", b =>
                {
                    b.HasOne("TTNtmp.Models.EmployeeCard", "EmployeeCard")
                        .WithMany()
                        .HasForeignKey("EmployeeCardId");

                    b.HasOne("TTNtmp.Models.Vendors", "HomeVendors")
                        .WithMany("Employees")
                        .HasForeignKey("HomeVendorsId");
                });

            modelBuilder.Entity("TTNtmp.Models.Holds", b =>
                {
                    b.HasOne("TTNtmp.Models.EmployeeCard", "EmployeeCard")
                        .WithMany()
                        .HasForeignKey("EmployeeCardId");

                    b.HasOne("TTNtmp.Models.VendorPosition", "VendorPosition")
                        .WithMany()
                        .HasForeignKey("VendorPositionId");
                });

            modelBuilder.Entity("TTNtmp.Models.Submission", b =>
                {
                    b.HasOne("TTNtmp.Models.EmployeeCard", "EmployeeCard")
                        .WithMany("Submissions")
                        .HasForeignKey("EmployeeCardId");

                    b.HasOne("TTNtmp.Models.VendorPosition", "VendorPosition")
                        .WithMany()
                        .HasForeignKey("VendorPositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TTNtmp.Models.VendorHours", b =>
                {
                    b.HasOne("TTNtmp.Models.Vendors", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");
                });

            modelBuilder.Entity("TTNtmp.Models.VendorPosition", b =>
                {
                    b.HasOne("TTNtmp.Models.Vendors", "Location")
                        .WithMany("VendorPositions")
                        .HasForeignKey("LocationId");
                });
#pragma warning restore 612, 618
        }
    }
}
